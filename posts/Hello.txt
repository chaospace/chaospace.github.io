1:HL["/_next/static/media/122c360d7fe6d395-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/media/a15f2fce4b98b461-s.p.woff2",{"as":"font","type":"font/woff2"}]
3:HL["/_next/static/css/513fe6d1da0f3f41.css",{"as":"style"}]
4:HL["/_next/static/css/9f4f3a83d5f5bb0d.css",{"as":"style"}]
0:["hkCGFF6Eqg_Q4h39RZaEB",[[["",{"children":["(pages)",{"children":["posts",{"children":[["slug","Hello","c"],{"children":["__PAGE__?{\"slug\":[\"Hello\"]}",{}]}]}]}]},"$undefined","$undefined",true],"$L5",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/513fe6d1da0f3f41.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/9f4f3a83d5f5bb0d.css","precedence":"next"}]],"$L6"]]]]
7:I{"id":9588,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","578:static/chunks/578-7478916a970fcb49.js","582:static/chunks/582-a0d280170724f0ec.js","185:static/chunks/app/layout-1c2ef9bea347222f.js"],"name":"","async":false}
8:I{"id":196,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","578:static/chunks/578-7478916a970fcb49.js","582:static/chunks/582-a0d280170724f0ec.js","185:static/chunks/app/layout-1c2ef9bea347222f.js"],"name":"","async":false}
9:I{"id":2568,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","578:static/chunks/578-7478916a970fcb49.js","582:static/chunks/582-a0d280170724f0ec.js","185:static/chunks/app/layout-1c2ef9bea347222f.js"],"name":"","async":false}
a:I{"id":3466,"chunks":["272:static/chunks/webpack-1f925c00cec8420c.js","253:static/chunks/bce60fc1-0247e260c1ca1b9c.js","961:static/chunks/961-90edfa57f01894b3.js"],"name":"default","async":false}
b:I{"id":372,"chunks":["272:static/chunks/webpack-1f925c00cec8420c.js","253:static/chunks/bce60fc1-0247e260c1ca1b9c.js","961:static/chunks/961-90edfa57f01894b3.js"],"name":"default","async":false}
d:I{"id":3245,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","578:static/chunks/578-7478916a970fcb49.js","582:static/chunks/582-a0d280170724f0ec.js","185:static/chunks/app/layout-1c2ef9bea347222f.js"],"name":"","async":false}
5:[["$","html",null,{"className":"__variable_21dd0c","suppressHydrationWarning":true,"children":["$","body",null,{"children":["$","$L7",null,{"children":[["$","$L8",null,{"id":"main-content","className":"relative flex flex-col border-l-gray-200 dark:border-l-gray-800","children":[["$","$L9",null,{"id":"content-header","className":"sticky z-10 flex flex-col top-0"}],["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","section",null,{"className":"relative mx-auto w-full max-w-7xl px-5 sm:px-10 mb-20","children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children","posts","children",["slug","Hello","c"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"slug\":[\"Hello\"]}"},"styles":[]}],"segment":["slug","Hello","c"]},"styles":[]}],"segment":"posts"},"styles":[]}]}],null],"segment":"(pages)"},"styles":[]}],["$","hr",null,{"className":"border-none h-px bg-gray-200 dark:bg-gray-800"}],["$","footer",null,{"className":"w-full px-10 py-8 text-center","children":[["$","p",null,{"className":"text-xs","children":"chaospace • © 2023 All rights reserved • Next.js Blog"}],["$","p",null,{"className":"text-xs","children":["Source code available on ",["$","a",null,{"className":"underline","children":"GitHub"}]]}]]}]]}],["$","$Ld",null,{}]]}]}]}],null]
6:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"제목 | chaospace's Blog"}],["$","meta","2",{"name":"description","content":"틈틈이 기억나는 내용을 정리하는 공간"}],["$","meta","3",{"name":"keywords","content":"test,sss"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","5",{"name":"creator","content":"chaospace"}],["$","link","6",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","7",{"name":"next-size-adjust"}]]
e:I{"id":9378,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","846:static/chunks/846-f9a0044b6873eac4.js","947:static/chunks/947-f23988b27fe3e696.js","863:static/chunks/app/(pages)/posts/[...slug]/page-546ecc5adabb164c.js"],"name":"","async":false}
10:I{"id":2375,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","846:static/chunks/846-f9a0044b6873eac4.js","947:static/chunks/947-f23988b27fe3e696.js","863:static/chunks/app/(pages)/posts/[...slug]/page-546ecc5adabb164c.js"],"name":"","async":false}
11:I{"id":3781,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","846:static/chunks/846-f9a0044b6873eac4.js","947:static/chunks/947-f23988b27fe3e696.js","863:static/chunks/app/(pages)/posts/[...slug]/page-546ecc5adabb164c.js"],"name":"","async":false}
12:I{"id":2092,"chunks":["957:static/chunks/59925f94-96b9832d7377ad60.js","599:static/chunks/599-d959104802c662bd.js","846:static/chunks/846-f9a0044b6873eac4.js","947:static/chunks/947-f23988b27fe3e696.js","863:static/chunks/app/(pages)/posts/[...slug]/page-546ecc5adabb164c.js"],"name":"","async":false}
f:T17b21,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    strong: "strong",
    sup: "sup",
    a: "a",
    br: "br",
    img: "img",
    table: "table",
    thead: "thead",
    tr: "tr",
    th: "th",
    tbody: "tbody",
    td: "td",
    h2: "h2",
    ol: "ol",
    li: "li",
    code: "code",
    blockquote: "blockquote",
    h3: "h3",
    div: "div",
    pre: "pre",
    span: "span",
    ul: "ul",
    em: "em",
    hr: "hr",
    section: "section"
  }, _provideComponents(), props.components);
  return _jsxs(_Fragment, {
    children: [_jsxs(_components.p, {
      children: ["오랫만에 캔버스를 이용한 이미지효과를 찾아보는 중 ", _jsx(_components.strong, {
        children: "델로네 삼각형"
      }), _jsx(_components.sup, {
        children: _jsx(_components.a, {
          href: "#user-content-fn-1",
          id: "user-content-fnref-1",
          "data-footnote-ref": true,
          "aria-describedby": "footnote-label",
          children: "1"
        })
      }), "을 이용한 점묘화 기법이", _jsx(_components.br, {}), "\n", "인상깊어 만들어 봤다."]
    }), "\n", _jsxs(_components.p, {
      children: [_jsx(_components.img, {
        src: "/images/experience/stippling/origin.jpg",
        alt: "원본이미지"
      }), "\n이런 원본 이미지가 있다고 하면 점묘법을 통해 아래와 같은 이미지로 표현할 수 있다."]
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: "밝은영역을 흰점으로 표현"
          }), _jsx(_components.th, {
            children: "어두운 영역을 검은점으로 표현"
          })]
        })
      }), _jsx(_components.tbody, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/normal.jpg",
              alt: "기본효과"
            })
          }), _jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/invert.jpg",
              alt: "반전효과"
            })
          })]
        })
      })]
    }), "\n", _jsx(_components.h2, {
      id: "개요",
      children: "개요"
    }), "\n", _jsx(_components.p, {
      children: "캔버스를 이용한 이미지 조작을 제외하고 대략적인 구현방법을 정리하면 아래와 같다."
    }), "\n", _jsxs(_components.ol, {
      children: ["\n", _jsxs(_components.li, {
        children: ["대상 이미지에 컬러 가중치를 구한다.(그레이스케일 컬러 값을 말하며 글에서 ", _jsx(_components.code, {
          children: "colorWeights"
        }), "라 표현 )"]
      }), "\n", _jsx(_components.li, {
        children: "이미지를 표현할 포인트 수를 정하고 랜덤한 위치에 포인트를 추가한다.\n이때, colorWeights값을 이용해 특정 영역(평균보다 밝거나 어두운 곳)에 더 많은 포인트를 추가해 기본적인 밀도 적용가능"
      }), "\n", _jsx(_components.li, {
        children: "d3-delaunay를 이용해 colorWeights에 따른 가중치를 포인트 위치값에 적용하며 밀도를 조정."
      }), "\n", _jsx(_components.li, {
        children: "3번을 반복하며 포인트에 가중치를 적용해 나가면 포인트 밀도를 통해 이미지 형태가 표현됨."
      }), "\n"]
    }), "\n", _jsx(_components.h2, {
      id: "컬러가중치-구하기",
      children: "컬러가중치 구하기"
    }), "\n", _jsx(_components.p, {
      children: "가중치에 사전적 정의는 아래와 같다."
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsx(_components.p, {
        children: "전체에서 가지는 중요성을 높이기 위하여 특정 부분이나 요소에 일정한 수치를 더한 것"
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: "이 효과에서는 이미지의 RGB컬러값에서 그레이스케일로 변환한 값을 가중치로 사용한다."
    }), "\n", _jsx(_components.h3, {
      id: "rgbtograyscale",
      children: "rgbToGrayscale"
    }), "\n", _jsxs(_components.p, {
      children: ["rgb값에서 grayscale값을 구하는 일반적인 방법은 아래와 같고 공식별로 조금씩 차이는 있지만 전문가가 아닌 나에겐 비슷해 보여서 그간 입맛대로 골라서 사용했던 것 같다.\n", _jsx(_components.a, {
        href: "https://blog.ggaman.com/965",
        children: "YUV 표현방식"
      }), "에 대한 내용이 궁금하신 분은 링크 내용을 참고하면 좋을거 같다."]
    }), "\n", _jsx(_components.div, {
      className: "remark-code-title",
      children: "rgb_to_grayscale"
    }), "\n", _jsx(_components.pre, {
      className: "language-javascript",
      children: _jsxs(_components.code, {
        className: "language-javascript code-highlight",
        children: [_jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token comment",
            children: "// 제일 간단한 방법 막눈으로는 잘 구분 "
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " value ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token constant",
            children: "R"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "G"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "B"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "/"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "3.33333"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token comment",
            children: "// YUV 표현 방법"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["cosnt value ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.299"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "R"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.587"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "G"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.114"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "B"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " value ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.2126"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "R"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.7152"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "G"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0.0722"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token constant",
            children: "B"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        })]
      })
    }), "\n", _jsx(_components.h3, {
      id: "srgbtograyscale",
      children: "sRGBToGrayScale"
    }), "\n", _jsxs(_components.p, {
      children: ["컴퓨터가 사용하는 색 공간체계는 ", _jsx(_components.code, {
        children: "sRGB"
      }), "라 불리는 녀석이라 앞에서 다룬 공식을 이용하면 ", _jsx(_components.a, {
        href: "https://www.youtube.com/watch?v=LKnqECcg6Gw",
        children: "영상"
      }), "에 나오는 것 처럼 믹스되는 컬러경계 주변이 정확하게 표현되지 않는 문제가 있어 ", _jsx(_components.code, {
        children: "선형 색상공간"
      }), "으로 변환 후에 사용하면 좋은데 이를 위한 코드는 아래에서 확인이 가능하다."]
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsx(_components.p, {
        children: "뭔가 색공간에 대한 지식이 필요한 부분인거 같아서 그냥 받아들이고 넘어갔다."
      }), "\n"]
    }), "\n", _jsx(_components.div, {
      className: "remark-code-title",
      children: "sRGBToLinear"
    }), "\n", _jsx(_components.pre, {
      className: "language-typescript",
      children: _jsxs(_components.code, {
        className: "language-typescript code-highlight",
        children: [_jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ", _jsx(_components.span, {
            className: "token function-variable function",
            children: "tosRGBLinear"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "rgba", _jsx(_components.span, {
            className: "token operator",
            children: ":"
          }), " ImageData", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "=>"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), " width", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " data ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " rgba", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " rgb ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Uint16Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "width ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " height ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "3"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " max ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " min ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token number",
            children: "256"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "**"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "3"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " width ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " idx ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "<<"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " ", _jsx(_components.span, {
            className: "token comment",
            children: "// *4"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " r ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " data", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " ", _jsx(_components.span, {
            className: "token comment",
            children: "// 1 ~ 256으로 조절"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      r ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " r ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " r ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "         ", _jsx(_components.span, {
            className: "token comment",
            children: "// 0**2 ~ 255**2 사이값으로 조정"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " g ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " data", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      g ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " g ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " g ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " b ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " data", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      b ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " b ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " b ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      idx ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "<<"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " i", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " ", _jsx(_components.span, {
            className: "token comment",
            children: "// idx값을 3의 배수로 조정"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " r", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " g", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " b", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " sum ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " r ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " g ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " b", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "if"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "sum ", _jsx(_components.span, {
            className: "token operator",
            children: ">"
          }), " max", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " max ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " sum", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "if"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "sum ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " min", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " min ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " sum", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "return"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      min", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "      max\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        })]
      })
    }), "\n", _jsx(_components.p, {
      children: "위 코드를 이용해 일반값과 반전된 그레이컬러스케일 값을 구성할 수 있다."
    }), "\n", _jsx(_components.div, {
      className: "remark-code-title",
      children: "toLinearGrayColor"
    }), "\n", _jsx(_components.pre, {
      className: "language-typescript",
      children: _jsxs(_components.code, {
        className: "language-typescript code-highlight",
        children: [_jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ", _jsx(_components.span, {
            className: "token function-variable function",
            children: "toLinearGrayColor"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "rgba", _jsx(_components.span, {
            className: "token operator",
            children: ":"
          }), " ImageData", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "=>"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), " rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " max", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " min ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token function",
            children: "tosRGBLinear"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "rgba", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), " width", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " height ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " rgba", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " invert ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Float32Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "width ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " normal ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Float32Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "width ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " ratio ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "/"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "max ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " min", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " invert", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), "length", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " idx ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "<<"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " i", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " ", _jsx(_components.span, {
            className: "token comment",
            children: "//3의 배수 처리"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " color ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " rgb", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        normal", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "color ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " min", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ratio", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        invert", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "max ", _jsx(_components.span, {
            className: "token operator",
            children: "-"
          }), " color", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ratio", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "    \n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token keyword",
            children: "return"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        normal", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " ", _jsx(_components.span, {
            className: "token comment",
            children: "// 기본 그레이스케일 컬러값"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["        invert  ", _jsx(_components.span, {
            className: "token comment",
            children: "// 반전된 그레이스케일 컬러값"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["    ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        })]
      })
    }), "\n", _jsx(_components.p, {
      children: "sRGB컬러를 선형변환 후 사용한 것과 일반 그레이스케일 공식을 적용한 이미지를 보면 명암구분이 좀더 명확해 지는 것을 확인 할 수 있다."
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: "sRGB선형변환적용"
          }), _jsx(_components.th, {
            children: "그레이스케일"
          })]
        })
      }), _jsx(_components.tbody, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/sRGB_linear.jpg",
              alt: "선형변환방식적용"
            })
          }), _jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/grayscale.jpg",
              alt: "그레이스케일"
            })
          })]
        })
      })]
    }), "\n", _jsx(_components.h2, {
      id: "이미지를-표현할-포인트-수-정하기",
      children: "이미지를 표현할 포인트 수 정하기"
    }), "\n", _jsxs(_components.p, {
      children: ["이미지를 충분히 표현하기 위한 포인트 수를 지정하면 된다.", _jsx(_components.br, {}), "\n", "이미지 가로*세로의 값을 max 포인트라고 생각하고 여기서 적정 비율을 정해서 사용하면 된다.", _jsx(_components.br, {}), "\n", "퍼포먼스를 위한 별도 처리없이 노멀하게 사용할 경우 4000~5000정도면 무리없이 돌아가는 것 같다."]
    }), "\n", _jsx(_components.div, {
      className: "remark-code-title",
      children: "랜덤포인트_추출"
    }), "\n", _jsx(_components.pre, {
      className: "language-typescript",
      children: _jsxs(_components.code, {
        className: "language-typescript code-highlight",
        children: [_jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " output ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Float32Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "pointNum ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " pointNum", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " x ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " y ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " j ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " rejected ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token boolean",
            children: "true"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " j ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "100"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "&&"
          }), " rejected", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " j", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      x ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " Math", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "floor"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token function",
            children: "randomFloat"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "width", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      y ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " Math", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "floor"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token function",
            children: "randomFloat"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "height", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token comment",
            children: "//가중치 값을 기준으로 추가여부를 판단하며 러프한 밀도를 초기에 구성한다."
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token comment",
            children: "//가중치가 낮은 값일 수록 random한 값보다 작을 확률이 높기때문."
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token comment",
            children: "//random값이 아닌 특정 임계값을 설정하고 제외해도 된다."
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " val ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " colorWeights", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "y ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " width ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " x", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      rejected ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " Math", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "random"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: ">"
          }), " val ", _jsx(_components.span, {
            className: "token operator",
            children: "**"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   output", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " x", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   output", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " y", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "return"
          }), " output", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        })]
      })
    }), "\n", _jsx(_components.h2, {
      id: "포인트에-컬러가중치-적용",
      children: "포인트에 컬러가중치 적용"
    }), "\n", _jsxs(_components.p, {
      children: ["생성한 포인트에 컬러 가중치는 ", _jsx(_components.code, {
        children: "d3-delaunay"
      }), "를 이용하고 가중치를 반복 적용하면 점점 포인트에 밀도가 형성되는 것을 확인할 수 있다."]
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: "최초 상태"
          }), _jsx(_components.th, {
            children: "가중치적용 4회"
          }), _jsx(_components.th, {
            children: "가중치적용 8회"
          })]
        })
      }), _jsx(_components.tbody, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/voronoi_first.jpg",
              alt: "최초형태"
            })
          }), _jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/voronoi_sec.jpg",
              alt: "4회 반복"
            })
          }), _jsx(_components.td, {
            children: _jsx(_components.img, {
              src: "/images/experience/stippling/voronoi_third.jpg",
              alt: "8회 반복"
            })
          })]
        })
      })]
    }), "\n", _jsx(_components.div, {
      className: "remark-code-title",
      children: "delaunay_컬러가중치_적용"
    }), "\n", _jsx(_components.pre, {
      className: "language-typescript",
      children: _jsxs(_components.code, {
        className: "language-typescript code-highlight",
        children: [_jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " weights ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Float32Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "pointNum", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " weightedCoordinates ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Float32Array"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "pointNum ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " delaunay ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token keyword",
            children: "new"
          }), " ", _jsx(_components.span, {
            className: "token class-name",
            children: "Delaunay"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "points", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " voronoi ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " delaunay", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "voronoi"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " width", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: [_jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " iter ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " iter ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " iteration", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " iter", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   weights", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "fill"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   weightedCoordinates", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "fill"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " y ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " idx ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " y ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " height", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " y", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " x ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " x ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " width", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " x", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["         ", _jsx(_components.span, {
            className: "token comment",
            children: "//인접셀을 찾아가며 전체 셀에 컬러 가중치 값을 계산."
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["         idx ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " delaunay", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "find"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "x ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " y ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " idx", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["         ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " w ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " colorWeights", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "y ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " width ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " x", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["         ", _jsx(_components.span, {
            className: "token keyword",
            children: "if"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "w", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["            weights", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+="
          }), " w", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["            weightedCoordinates", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+="
          }), " w ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "x ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["            weightedCoordinates", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "idx ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+="
          }), " w ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "y ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["         ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token comment",
            children: "//계산된 가중치 위치로 포인트 위치 조정"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token keyword",
            children: "for"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "0"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i ", _jsx(_components.span, {
            className: "token operator",
            children: "<"
          }), " pointNum", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), " i", _jsx(_components.span, {
            className: "token operator",
            children: "++"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " x0 ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " points", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "let"
          }), " y0 ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " points", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "const"
          }), " w ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " weights", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i", _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token keyword",
            children: "if"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "w", _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), " ", _jsx(_components.span, {
            className: "token punctuation",
            children: "{"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["            x0 ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token function",
            children: "lerp"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "x0", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " weightedCoordinates", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "/"
          }), " w", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5214"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["            y0 ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " ", _jsx(_components.span, {
            className: "token function",
            children: "lerp"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), "y0", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " weightedCoordinates", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "/"
          }), " w", _jsx(_components.span, {
            className: "token punctuation",
            children: ","
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: ".5214"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      points", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " x0", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["      points", _jsx(_components.span, {
            className: "token punctuation",
            children: "["
          }), "i ", _jsx(_components.span, {
            className: "token operator",
            children: "*"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "2"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "+"
          }), " ", _jsx(_components.span, {
            className: "token number",
            children: "1"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "]"
          }), " ", _jsx(_components.span, {
            className: "token operator",
            children: "="
          }), " y0", _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   ", _jsx(_components.span, {
            className: "token punctuation",
            children: "}"
          }), "\n"]
        }), _jsx(_components.span, {
          className: "code-line",
          children: "\n"
        }), _jsxs(_components.span, {
          className: "code-line",
          children: ["   voronoi", _jsx(_components.span, {
            className: "token punctuation",
            children: "."
          }), _jsx(_components.span, {
            className: "token function",
            children: "update"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: "("
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ")"
          }), _jsx(_components.span, {
            className: "token punctuation",
            children: ";"
          }), "\n"]
        })]
      })
    }), "\n", _jsx(_components.h2, {
      id: "후기",
      children: "후기"
    }), "\n", _jsx(_components.p, {
      children: "기본적인 구현 후 퍼포먼스를 위해 Worker를 이용해 아래와 같은 리팩토링을 진행했다."
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: "OffScreenCanvas 이용해 imageData연산을 모두 메인쓰레드와 분리"
      }), "\n", _jsx(_components.li, {
        children: "제너레이터를 이용한 가중치 적용연산 개선"
      }), "\n", _jsx(_components.li, {
        children: "가중치에 따른 포인트 사이즈 적용"
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.code, {
          children: "window.resize"
        }), "시 context에 scale을 적용한 리사이즈 처리"]
      }), "\n"]
    }), "\n", _jsxs(_components.p, {
      children: [_jsx(_components.em, {
        children: "들로네 삼각형에 컬러값을 적용해 표현"
      }), "\n", _jsx(_components.img, {
        src: "/images/experience/stippling/vonoroi_colorize.jpg",
        alt: "보로노이삼각형을 이용한 표현"
      })]
    }), "\n", _jsx(_components.h2, {
      id: "참고",
      children: "참고"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://www.esimov.com/2019/04/image-triangulation-in-go",
          children: "Delaunay image triangulation"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://openprocessing.org/sketch/1236886/",
          children: "Stippling, Voronois And TSPs"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://observablehq.com/@jobleonard/untitled",
          children: "Voronoi Stippling Experiments"
        })
      }), "\n"]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsxs(_components.section, {
      "data-footnotes": true,
      className: "footnotes",
      children: [_jsx(_components.h2, {
        className: "sr-only",
        id: "footnote-label",
        children: "Footnotes"
      }), "\n", _jsxs(_components.ol, {
        children: ["\n", _jsxs(_components.li, {
          id: "user-content-fn-1",
          children: ["\n", _jsxs(_components.p, {
            children: [_jsx(_components.a, {
              href: "https://kr.mathworks.com/help/matlab/math/delaunay-triangulation.html",
              children: "델로네 삼각분할"
            }), " : 계산기하학에서 평면의 점 집합 P의 델로네 삼각분할 DT는 DT에 속하는 모든 삼각형의 외접원 내에 P에 속하는 어떤 점도 속하지 않도록 만든 삼각분할이다. 최대한 정삼각형의 모양과 가깝게 분할한다는 특징이 있다 ", _jsx(_components.a, {
              href: "#user-content-fnref-1",
              "data-footnote-backref": true,
              className: "data-footnote-backref",
              "aria-label": "Back to content",
              children: "↩"
            })]
          }), "\n"]
        }), "\n"]
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
c:[["$","article",null,{"children":[["$","h1",null,{"className":"font-bold text-3xl","children":"제목"}],["$","p",null,{"className":"my-1","children":"In this article we introduce adding images in the tailwind starter blog and the benefits and limitations of the next/image component."}],["$","span",null,{"className":"flex flex-wrap gap-2 items-center text-xs","children":[["$","span",null,{"className":"inline-flex items-center basis-24 flex-grow-0","children":[["$","svg",null,{"aria-hidden":"true","focusable":"false","data-prefix":"far","data-icon":"calendar","className":"svg-inline--fa fa-calendar fa-xs ","role":"img","xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 448 512","style":{},"children":["$","path",null,{"fill":"currentColor","d":"M152 24c0-13.3-10.7-24-24-24s-24 10.7-24 24V64H64C28.7 64 0 92.7 0 128v16 48V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V192 144 128c0-35.3-28.7-64-64-64H344V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V64H152V24zM48 192H400V448c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V192z","style":{}}]}],["$","time",null,{"className":"pl-1","dateTime":"2022-07-17","children":"2022-07-17"}]]}],["$","span",null,{"className":"inline-flex items-center basis-24 flex-grow-0","children":[["$","svg",null,{"aria-hidden":"true","focusable":"false","data-prefix":"far","data-icon":"clock","className":"svg-inline--fa fa-clock fa-xs ","role":"img","xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 512 512","style":{},"children":["$","path",null,{"fill":"currentColor","d":"M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z","style":{}}]}],["$","span",null,{"className":"pl-1","children":"11 minutes"}]]}]]}],["$","hr",null,{"className":"border-none h-px bg-gray-200 dark:bg-gray-800 my-10"}]]}],["$","div",null,{"className":"lg:grid lg:grid-cols-[1fr_260px] lg:gap-8","children":[["$","div",null,{"data-content":"post-area","className":"prose max-w-[796px] dark:prose-dark","children":[["$","$Le",null,{"compiledSource":"$f","frontmatter":{"title":"제목","date":"$D2022-07-17T00:00:00.000Z","tags":["test","sss"],"draft":false,"summary":"In this article we introduce adding images in the tailwind starter blog and the benefits and limitations of the next/image component.","readTime":10.12},"scope":{"toc":[{"value":"개요","url":"#개요","depth":2},{"value":"컬러가중치 구하기","url":"#컬러가중치-구하기","depth":2},{"value":"rgbToGrayscale","url":"#rgbtograyscale","depth":3},{"value":"sRGBToGrayScale","url":"#srgbtograyscale","depth":3},{"value":"이미지를 표현할 포인트 수 정하기","url":"#이미지를-표현할-포인트-수-정하기","depth":2},{"value":"포인트에 컬러가중치 적용","url":"#포인트에-컬러가중치-적용","depth":2},{"value":"후기","url":"#후기","depth":2},{"value":"참고","url":"#참고","depth":2}]},"toc":[{"value":"개요","url":"#개요","depth":2},{"value":"컬러가중치 구하기","url":"#컬러가중치-구하기","depth":2},{"value":"rgbToGrayscale","url":"#rgbtograyscale","depth":3},{"value":"sRGBToGrayScale","url":"#srgbtograyscale","depth":3},{"value":"이미지를 표현할 포인트 수 정하기","url":"#이미지를-표현할-포인트-수-정하기","depth":2},{"value":"포인트에 컬러가중치 적용","url":"#포인트에-컬러가중치-적용","depth":2},{"value":"후기","url":"#후기","depth":2},{"value":"참고","url":"#참고","depth":2}]}],["$","$L10",null,{}]]}],["$","$L11",null,{"className":"hidden lg:block","toc":[{"value":"개요","url":"#개요","depth":2},{"value":"컬러가중치 구하기","url":"#컬러가중치-구하기","depth":2},{"value":"rgbToGrayscale","url":"#rgbtograyscale","depth":3},{"value":"sRGBToGrayScale","url":"#srgbtograyscale","depth":3},{"value":"이미지를 표현할 포인트 수 정하기","url":"#이미지를-표현할-포인트-수-정하기","depth":2},{"value":"포인트에 컬러가중치 적용","url":"#포인트에-컬러가중치-적용","depth":2},{"value":"후기","url":"#후기","depth":2},{"value":"참고","url":"#참고","depth":2}]}],["$","$L12",null,{"toc":[{"value":"개요","url":"#개요","depth":2},{"value":"컬러가중치 구하기","url":"#컬러가중치-구하기","depth":2},{"value":"rgbToGrayscale","url":"#rgbtograyscale","depth":3},{"value":"sRGBToGrayScale","url":"#srgbtograyscale","depth":3},{"value":"이미지를 표현할 포인트 수 정하기","url":"#이미지를-표현할-포인트-수-정하기","depth":2},{"value":"포인트에 컬러가중치 적용","url":"#포인트에-컬러가중치-적용","depth":2},{"value":"후기","url":"#후기","depth":2},{"value":"참고","url":"#참고","depth":2}]}]]}]]
